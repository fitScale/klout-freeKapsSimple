/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation createCart(\n    $merchandiseId: ID!\n    $quantity: Int!\n    $sellingPlanId: ID\n  ) {\n    cartCreate(\n      input: {\n        lines: {\n          merchandiseId: $merchandiseId\n          quantity: $quantity\n          sellingPlanId: $sellingPlanId\n        }\n      }\n    ) {\n      cart {\n        id\n        checkoutUrl\n      }\n    }\n  }\n": types.CreateCartDocument,
    "\n  mutation addCartItem(\n    $cartId: ID!\n    $merchandiseId: ID!\n    $quantity: Int!\n    $sellingPlanId: ID\n  ) {\n    cartLinesAdd(\n      cartId: $cartId\n      lines: {\n        merchandiseId: $merchandiseId\n        quantity: $quantity\n        sellingPlanId: $sellingPlanId\n      }\n    ) {\n      cart {\n        id\n        totalQuantity\n        checkoutUrl\n      }\n    }\n  }\n": types.AddCartItemDocument,
    "\n  mutation updateCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n    }\n  }\n": types.UpdateCartItemsDocument,
    "\n  mutation removeCartItem($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n      }\n    }\n  }\n": types.RemoveCartItemDocument,
    "\n  query getCart($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      checkoutUrl\n      cost {\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalAmount {\n          currencyCode\n          amount\n        }\n      }\n      lines(first: 250) {\n        edges {\n          node {\n            id\n            merchandise {\n              ... on ProductVariant {\n                id\n                priceV2 {\n                  amount\n                  currencyCode\n                }\n                image {\n                  altText\n                  height\n                  width\n                  src\n                }\n                title\n                product {\n                  id\n                }\n              }\n            }\n            quantity\n            estimatedCost {\n              subtotalAmount {\n                amount\n                currencyCode\n              }\n              totalAmount {\n                currencyCode\n                amount\n              }\n            }\n            cost {\n              amountPerQuantity {\n                amount\n                currencyCode\n              }\n              subtotalAmount {\n                currencyCode\n                amount\n              }\n            }\n          }\n        }\n      }\n      totalQuantity\n    }\n  }\n": types.GetCartDocument,
    "\n  query getCartCount($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      totalQuantity\n    }\n  }\n": types.GetCartCountDocument,
    "\n  query getProductSingle($productId: ID!) {\n    product(id: $productId) {\n      description\n      id\n      images(first: 250) {\n        edges {\n          node {\n            altText\n            height\n            width\n            src\n          }\n        }\n      }\n      priceRange {\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n      seo {\n        description\n        title\n      }\n      title\n      variants(first: 250) {\n        edges {\n          node {\n            id\n            title\n            priceV2 {\n              currencyCode\n              amount\n            }\n            availableForSale\n            currentlyNotInStock\n            quantityAvailable\n            compareAtPriceV2 {\n              currencyCode\n              amount\n            }\n            image {\n              src\n              width\n              height\n              altText\n            }\n            metafield(key: \"productdata\", namespace: \"custom\") {\n              value\n              key\n            }\n          }\n        }\n      }\n      sellingPlanGroups(first: 10) {\n        edges {\n          node {\n            appName\n            name\n            options {\n              name\n              values\n            }\n            sellingPlans(first: 10) {\n              edges {\n                node {\n                  checkoutCharge {\n                    type\n                    value {\n                      ... on MoneyV2 {\n                        __typename\n                        amount\n                        currencyCode\n                      }\n                      ... on SellingPlanCheckoutChargePercentageValue {\n                        __typename\n                        percentage\n                      }\n                    }\n                  }\n                  description\n                  id\n                  name\n                  options {\n                    name\n                    value\n                  }\n                  recurringDeliveries\n                  priceAdjustments {\n                    adjustmentValue {\n                      ... on SellingPlanPercentagePriceAdjustment {\n                        __typename\n                        adjustmentPercentage\n                      }\n                    }\n                    orderCount\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      metafields(identifiers: { namespace: \"\", key: \"\" }) {\n        value\n        key\n        namespace\n      }\n    }\n  }\n": types.GetProductSingleDocument,
    "\n  query getProductList($first: Int!, $after: String) {\n    products(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          images(first: 1) {\n            edges {\n              node {\n                altText\n                height\n                width\n                src\n              }\n            }\n          }\n          priceRange {\n            maxVariantPrice {\n              currencyCode\n              amount\n            }\n            minVariantPrice {\n              currencyCode\n              amount\n            }\n          }\n          variants(first: 250) {\n            edges {\n              node {\n                id\n                image {\n                  src\n                  altText\n                  height\n                  width\n                }\n                priceV2 {\n                  amount\n                  currencyCode\n                }\n                title\n                quantityAvailable\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      filters {\n        type\n        label\n        id\n        values {\n          count\n          id\n          input\n          label\n        }\n      }\n    }\n  }\n": types.GetProductListDocument,
    "\n  query getCollectionSingle($collectionId: ID!, $first: Int!, $after: String) {\n    collection(id: $collectionId) {\n      id\n      title\n      seo {\n        description\n        title\n      }\n      products(first: $first, after: $after) {\n        edges {\n          node {\n            id\n            title\n            images(first: 1) {\n              edges {\n                node {\n                  altText\n                  height\n                  width\n                  src\n                }\n              }\n            }\n            priceRange {\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n              minVariantPrice {\n                currencyCode\n                amount\n              }\n            }\n            variants(first: 250) {\n              edges {\n                node {\n                  availableForSale\n                  currentlyNotInStock\n                  id\n                  image {\n                    src\n                  }\n                  priceV2 {\n                    amount\n                    currencyCode\n                  }\n                  title\n                  quantityAvailable\n                  compareAtPriceV2 {\n                    currencyCode\n                    amount\n                  }\n                  metafield(key: \"productdata\", namespace: \"custom\") {\n                    value\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }\n        filters {\n          values {\n            count\n            id\n            input\n            label\n          }\n          id\n          label\n          type\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetCollectionSingleDocument,
    "\n  query getCollectionList($first: Int!, $after: String) {\n    collections(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          seo {\n            title\n            description\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": types.GetCollectionListDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCart(\n    $merchandiseId: ID!\n    $quantity: Int!\n    $sellingPlanId: ID\n  ) {\n    cartCreate(\n      input: {\n        lines: {\n          merchandiseId: $merchandiseId\n          quantity: $quantity\n          sellingPlanId: $sellingPlanId\n        }\n      }\n    ) {\n      cart {\n        id\n        checkoutUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCart(\n    $merchandiseId: ID!\n    $quantity: Int!\n    $sellingPlanId: ID\n  ) {\n    cartCreate(\n      input: {\n        lines: {\n          merchandiseId: $merchandiseId\n          quantity: $quantity\n          sellingPlanId: $sellingPlanId\n        }\n      }\n    ) {\n      cart {\n        id\n        checkoutUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addCartItem(\n    $cartId: ID!\n    $merchandiseId: ID!\n    $quantity: Int!\n    $sellingPlanId: ID\n  ) {\n    cartLinesAdd(\n      cartId: $cartId\n      lines: {\n        merchandiseId: $merchandiseId\n        quantity: $quantity\n        sellingPlanId: $sellingPlanId\n      }\n    ) {\n      cart {\n        id\n        totalQuantity\n        checkoutUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation addCartItem(\n    $cartId: ID!\n    $merchandiseId: ID!\n    $quantity: Int!\n    $sellingPlanId: ID\n  ) {\n    cartLinesAdd(\n      cartId: $cartId\n      lines: {\n        merchandiseId: $merchandiseId\n        quantity: $quantity\n        sellingPlanId: $sellingPlanId\n      }\n    ) {\n      cart {\n        id\n        totalQuantity\n        checkoutUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation removeCartItem($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation removeCartItem($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCart($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      checkoutUrl\n      cost {\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalAmount {\n          currencyCode\n          amount\n        }\n      }\n      lines(first: 250) {\n        edges {\n          node {\n            id\n            merchandise {\n              ... on ProductVariant {\n                id\n                priceV2 {\n                  amount\n                  currencyCode\n                }\n                image {\n                  altText\n                  height\n                  width\n                  src\n                }\n                title\n                product {\n                  id\n                }\n              }\n            }\n            quantity\n            estimatedCost {\n              subtotalAmount {\n                amount\n                currencyCode\n              }\n              totalAmount {\n                currencyCode\n                amount\n              }\n            }\n            cost {\n              amountPerQuantity {\n                amount\n                currencyCode\n              }\n              subtotalAmount {\n                currencyCode\n                amount\n              }\n            }\n          }\n        }\n      }\n      totalQuantity\n    }\n  }\n"): (typeof documents)["\n  query getCart($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      checkoutUrl\n      cost {\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalAmount {\n          currencyCode\n          amount\n        }\n      }\n      lines(first: 250) {\n        edges {\n          node {\n            id\n            merchandise {\n              ... on ProductVariant {\n                id\n                priceV2 {\n                  amount\n                  currencyCode\n                }\n                image {\n                  altText\n                  height\n                  width\n                  src\n                }\n                title\n                product {\n                  id\n                }\n              }\n            }\n            quantity\n            estimatedCost {\n              subtotalAmount {\n                amount\n                currencyCode\n              }\n              totalAmount {\n                currencyCode\n                amount\n              }\n            }\n            cost {\n              amountPerQuantity {\n                amount\n                currencyCode\n              }\n              subtotalAmount {\n                currencyCode\n                amount\n              }\n            }\n          }\n        }\n      }\n      totalQuantity\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCartCount($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      totalQuantity\n    }\n  }\n"): (typeof documents)["\n  query getCartCount($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      totalQuantity\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductSingle($productId: ID!) {\n    product(id: $productId) {\n      description\n      id\n      images(first: 250) {\n        edges {\n          node {\n            altText\n            height\n            width\n            src\n          }\n        }\n      }\n      priceRange {\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n      seo {\n        description\n        title\n      }\n      title\n      variants(first: 250) {\n        edges {\n          node {\n            id\n            title\n            priceV2 {\n              currencyCode\n              amount\n            }\n            availableForSale\n            currentlyNotInStock\n            quantityAvailable\n            compareAtPriceV2 {\n              currencyCode\n              amount\n            }\n            image {\n              src\n              width\n              height\n              altText\n            }\n            metafield(key: \"productdata\", namespace: \"custom\") {\n              value\n              key\n            }\n          }\n        }\n      }\n      sellingPlanGroups(first: 10) {\n        edges {\n          node {\n            appName\n            name\n            options {\n              name\n              values\n            }\n            sellingPlans(first: 10) {\n              edges {\n                node {\n                  checkoutCharge {\n                    type\n                    value {\n                      ... on MoneyV2 {\n                        __typename\n                        amount\n                        currencyCode\n                      }\n                      ... on SellingPlanCheckoutChargePercentageValue {\n                        __typename\n                        percentage\n                      }\n                    }\n                  }\n                  description\n                  id\n                  name\n                  options {\n                    name\n                    value\n                  }\n                  recurringDeliveries\n                  priceAdjustments {\n                    adjustmentValue {\n                      ... on SellingPlanPercentagePriceAdjustment {\n                        __typename\n                        adjustmentPercentage\n                      }\n                    }\n                    orderCount\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      metafields(identifiers: { namespace: \"\", key: \"\" }) {\n        value\n        key\n        namespace\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductSingle($productId: ID!) {\n    product(id: $productId) {\n      description\n      id\n      images(first: 250) {\n        edges {\n          node {\n            altText\n            height\n            width\n            src\n          }\n        }\n      }\n      priceRange {\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n      seo {\n        description\n        title\n      }\n      title\n      variants(first: 250) {\n        edges {\n          node {\n            id\n            title\n            priceV2 {\n              currencyCode\n              amount\n            }\n            availableForSale\n            currentlyNotInStock\n            quantityAvailable\n            compareAtPriceV2 {\n              currencyCode\n              amount\n            }\n            image {\n              src\n              width\n              height\n              altText\n            }\n            metafield(key: \"productdata\", namespace: \"custom\") {\n              value\n              key\n            }\n          }\n        }\n      }\n      sellingPlanGroups(first: 10) {\n        edges {\n          node {\n            appName\n            name\n            options {\n              name\n              values\n            }\n            sellingPlans(first: 10) {\n              edges {\n                node {\n                  checkoutCharge {\n                    type\n                    value {\n                      ... on MoneyV2 {\n                        __typename\n                        amount\n                        currencyCode\n                      }\n                      ... on SellingPlanCheckoutChargePercentageValue {\n                        __typename\n                        percentage\n                      }\n                    }\n                  }\n                  description\n                  id\n                  name\n                  options {\n                    name\n                    value\n                  }\n                  recurringDeliveries\n                  priceAdjustments {\n                    adjustmentValue {\n                      ... on SellingPlanPercentagePriceAdjustment {\n                        __typename\n                        adjustmentPercentage\n                      }\n                    }\n                    orderCount\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      metafields(identifiers: { namespace: \"\", key: \"\" }) {\n        value\n        key\n        namespace\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductList($first: Int!, $after: String) {\n    products(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          images(first: 1) {\n            edges {\n              node {\n                altText\n                height\n                width\n                src\n              }\n            }\n          }\n          priceRange {\n            maxVariantPrice {\n              currencyCode\n              amount\n            }\n            minVariantPrice {\n              currencyCode\n              amount\n            }\n          }\n          variants(first: 250) {\n            edges {\n              node {\n                id\n                image {\n                  src\n                  altText\n                  height\n                  width\n                }\n                priceV2 {\n                  amount\n                  currencyCode\n                }\n                title\n                quantityAvailable\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      filters {\n        type\n        label\n        id\n        values {\n          count\n          id\n          input\n          label\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductList($first: Int!, $after: String) {\n    products(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          images(first: 1) {\n            edges {\n              node {\n                altText\n                height\n                width\n                src\n              }\n            }\n          }\n          priceRange {\n            maxVariantPrice {\n              currencyCode\n              amount\n            }\n            minVariantPrice {\n              currencyCode\n              amount\n            }\n          }\n          variants(first: 250) {\n            edges {\n              node {\n                id\n                image {\n                  src\n                  altText\n                  height\n                  width\n                }\n                priceV2 {\n                  amount\n                  currencyCode\n                }\n                title\n                quantityAvailable\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      filters {\n        type\n        label\n        id\n        values {\n          count\n          id\n          input\n          label\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCollectionSingle($collectionId: ID!, $first: Int!, $after: String) {\n    collection(id: $collectionId) {\n      id\n      title\n      seo {\n        description\n        title\n      }\n      products(first: $first, after: $after) {\n        edges {\n          node {\n            id\n            title\n            images(first: 1) {\n              edges {\n                node {\n                  altText\n                  height\n                  width\n                  src\n                }\n              }\n            }\n            priceRange {\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n              minVariantPrice {\n                currencyCode\n                amount\n              }\n            }\n            variants(first: 250) {\n              edges {\n                node {\n                  availableForSale\n                  currentlyNotInStock\n                  id\n                  image {\n                    src\n                  }\n                  priceV2 {\n                    amount\n                    currencyCode\n                  }\n                  title\n                  quantityAvailable\n                  compareAtPriceV2 {\n                    currencyCode\n                    amount\n                  }\n                  metafield(key: \"productdata\", namespace: \"custom\") {\n                    value\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }\n        filters {\n          values {\n            count\n            id\n            input\n            label\n          }\n          id\n          label\n          type\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCollectionSingle($collectionId: ID!, $first: Int!, $after: String) {\n    collection(id: $collectionId) {\n      id\n      title\n      seo {\n        description\n        title\n      }\n      products(first: $first, after: $after) {\n        edges {\n          node {\n            id\n            title\n            images(first: 1) {\n              edges {\n                node {\n                  altText\n                  height\n                  width\n                  src\n                }\n              }\n            }\n            priceRange {\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n              minVariantPrice {\n                currencyCode\n                amount\n              }\n            }\n            variants(first: 250) {\n              edges {\n                node {\n                  availableForSale\n                  currentlyNotInStock\n                  id\n                  image {\n                    src\n                  }\n                  priceV2 {\n                    amount\n                    currencyCode\n                  }\n                  title\n                  quantityAvailable\n                  compareAtPriceV2 {\n                    currencyCode\n                    amount\n                  }\n                  metafield(key: \"productdata\", namespace: \"custom\") {\n                    value\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }\n        filters {\n          values {\n            count\n            id\n            input\n            label\n          }\n          id\n          label\n          type\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCollectionList($first: Int!, $after: String) {\n    collections(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          seo {\n            title\n            description\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCollectionList($first: Int!, $after: String) {\n    collections(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          seo {\n            title\n            description\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;